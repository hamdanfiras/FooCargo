@using FooCargo.CoreModels
@using Blazored.LocalStorage
@using System.Linq;
@using FooCargoWebUI.APIClient

@page "/rates"
@inject ILocalStorageService LocalStorage
@inject ApiClient ApiClient
@inject Auth Auth
@*@inject FooCargoWebUI.BarApiClient BarHttp*@

@if (rates == null)
{
    <p>Loading the rates</p>
}
else
{
    <h3 class="toprint">Rates</h3>
    <table class="table toprint">
        <thead>
            <tr>
                <th>Origin</th>
                <th>Destination</th>
                <th>Mail Type</th>
                <th>Amount</th>
                @if (canEditRates)
                {
                    <th>Edit</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var rate in rates.Rows)
            {
                <tr>
                    <td>@rate.Origin</td>
                    <td>@rate.Destination</td>
                    <td>@rate.MailType</td>
                    <td>@rate.Amount</td>
                    @if (canEditRates)
                    {
                        <td><button @onclick="() => Edit(rate)" class="btn btn-primary">Edit</button></td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <nav>
        <ul class="pagination">
            @*<li class="page-item"><a class="page-link" href="#">Previous</a></li>*@
            @foreach (var currPage in Enumerable.Range(0, rates.NumberOfPages))
            {
                <li class="page-item"><button class="page-link" @onclick="async () => await GetRates(currPage)">@currPage</button></li>
            }


            @*<li class="page-item"><a class="page-link" href="#">Next</a></li>*@
        </ul>
    </nav>


    @if (rateToEdit != null)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <EditForm Model="@rateToEdit" OnValidSubmit="@SubmitRateEdit">
                        <div class="modal-header">
                            <h5 class="modal-title" id="staticBackdropLabel">Edit Rate</h5>

                        </div>
                        <div class="modal-body">
                            @*<div class="mb-3">
                                    <label for="rateToEditMailTypeLabel" class="form-label">Mail Type:</label>
                                    <select class="form-control"
                                            @bind="rateToEdit.MailType">
                                        <option value="@MailType.TypeX">Type X</option>
                                        <option value="@MailType.TypeY">Type Y</option>
                                        <option value="@MailType.TypeZ">Type Z</option>
                                    </select>
                                </div>


                                <div class="mb-3">
                                    <label for="rateToEditOriginLabel" class="form-label">Origin</label>
                                    <InputText @bind-Value="rateToEdit.Origin"
                                               class="form-control" id="rateToEditOrigin" aria-describedby="Origin"></InputText>
                                </div>


                                <div class="mb-3">
                                    <label for="rateToEditDestinationLabel" class="form-label">Destination</label>
                                    <InputText @bind-Value="rateToEdit.Destination"
                                               class="form-control" id="rateToEditDestination" aria-describedby="Destination"></InputText>
                                </div>*@


                            <div class="mb-3">
                                <label for="rateToEditAmountLabel" class="form-label">Amount</label>
                                <InputNumber @bind-Value="rateToEdit.Amount"
                                             class="form-control" id="rateToEditAmount" aria-describedby="Amount"></InputNumber>
                            </div>



                        </div>
                        <div class="modal-footer">
                            <button @onclick="() => rateToEdit = null" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>

            </div>
        </div>
    }
}

@code {
    private PagedResult<Rate> rates = null;
    private List<Airport> airports = null;
    private bool canEditRates = false;
    private Rate rateToEdit = null;
    int currentPage = 0;


    protected override async Task OnInitializedAsync()
    {
        canEditRates = await Auth.IsAdmin();

        await GetRates();

    }



    async Task GetRates(int page = 0)
    {
        //var loginResult = await LocalStorage.GetItemAsync<LoginResult>("LOGIN_RESULT");
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", loginResult.Token);

        // Above two lines were replaced in TokenHttpClientDelegatingHandler for DRY code
        currentPage = page;
        rates = await ApiClient.GetRates(currentPage);
        airports = await ApiClient.GetAirports();
        //rates = await httpClient.GetFromJsonAsync<PagedResult<Rate>>($"/api/rates?page={page}");
    }

    void Edit(Rate rate)
    {
        //rateToEdit = rate;

        // a new reference is created to avoid auto changes in the table that would confuse the user
        rateToEdit = new Rate { MailType = rate.MailType, Amount = rate.Amount, Destination = rate.Destination, Origin = rate.Origin };
    }

    async Task SubmitRateEdit()
    {

        var res = await ApiClient.PutRate(rateToEdit);
        if (res)
        {
            await GetRates(currentPage);
        }

        rateToEdit = null;
    }

}
