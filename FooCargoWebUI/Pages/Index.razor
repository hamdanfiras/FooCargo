@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using FooCargo.CoreModels
@code {

    LoginInfo loginInfo = new LoginInfo();

    async Task Login()
    {
        // casting from AuthenticationStateProvider to our implementation (FooCargoAuthenticationStateProvider)
        FooCargoAuthenticationStateProvider provider = AuthenticationStateProvider as FooCargoAuthenticationStateProvider;
        await provider.Login(loginInfo);
        
        // clear login inputs after login success
        loginInfo = new LoginInfo();
    }

    async Task Logout()
    {
        FooCargoAuthenticationStateProvider provider = AuthenticationStateProvider as FooCargoAuthenticationStateProvider;
        await provider.Logout();
    }
}

<AuthorizeView>
    <Authorized>
        <h1>Hello, world!</h1>
        Welcome to your new app. <a href="/counter">Go to counter</a>
        <br />
        <button @onclick="Logout">Please logout</button>

    </Authorized>
    <NotAuthorized Context="Auth">
      
        <div class="row">
            <div class="col-6">
                <EditForm Model="@loginInfo" OnValidSubmit="@Login">

                    <div class="mb-3">
                        <label for="exampleInputEmail1" class="form-label">Email address</label>
                        <InputText @bind-Value="loginInfo.Email" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp"></InputText>
                    </div>
                    <div class="mb-3">
                        <label for="exampleInputPassword1" class="form-label">Password</label>
                        <InputText @bind-Value="loginInfo.Password" type="password" class="form-control" id="exampleInputPassword1"></InputText>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>

                </EditForm>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>